package com.Base_Class;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Base_Class {
	
	public static WebDriver driver;

	public static WebDriver Browser_lauch()
	{
		
		System.setProperty("webdriver.chrome.driver", 
				"C:\\Users\\Lenevo\\eclipse-workspace\\Partnerr\\Chrome_Driver\\chromedriver.exe");
		
		return driver = new ChromeDriver();

	}
	public static void maximize() {	
		driver.manage().window().maximize();

	}

	 public static void waitimplecit() {
		 

		 driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
	}
		public static void close() {
			driver.close();
		}

		public static void quit() {
			driver.quit();
		}

		
		public static void navigateTo(String S) {
			driver.navigate().to(S);
		}

		public static void navigateback() {
			driver.navigate().back();
		}

		public static void navigatefrwd() {
			driver.navigate().forward();
		}

		public static void navigateRefr() {
			driver.navigate().refresh();
		}

		public static void getUrl(String a) {
			driver.get(a);
		}

		public static void Maximize() {
			driver.manage().window().maximize();
		}

		public static void Alertaccept() {
			driver.switchTo().alert().accept();
		}

		public static void AlertDismis() {
			driver.switchTo().alert().dismiss();
		}

		public static void AlertSendkey(String S) {
			driver.switchTo().alert().sendKeys(S);
		}
	    
		public static void ClicktheElement(WebElement sr1)
		{
			sr1.click();
	}
		public static void actionscontet() {
			Actions act = new Actions(driver);
			act.contextClick();
		}

		
		public static void Robot1(WebElement ro) throws AWTException {
			Robot ro1 = new Robot();
			
			ro1.keyPress(KeyEvent.VK_DOWN);
			ro1.keyRelease(KeyEvent.VK_DOWN);
			ro1.keyPress(KeyEvent.VK_ENTER);
			ro1.keyRelease(KeyEvent.VK_ENTER);
			
		}


		public static void Frames(WebElement F) {
			driver.switchTo().frame(F);
		}

		public static void windowhandling(WebElement win) {
			String windowHandle = driver.getWindowHandle();
			windowHandle.equals(win);
		}

		public static void Dropdown(WebElement AB, WebElement cd) {
			Actions dp1 = new Actions(driver);
			dp1.dragAndDrop(AB, cd);
		}


		public static void Isenable(WebElement A) {
			boolean selected = A.isSelected();
			System.out.println(selected);
		}

		public static void Isdisplayed(WebElement dis) {
			boolean selected = dis.isSelected();
			System.out.println(selected);
		}

		public static void Isselected(WebElement sele) {
			boolean selected = sele.isSelected();
			System.out.println(selected);
		}

		public static void selecttheindex(WebElement element ,int A) {
			Select sc = new Select(element);
			sc.selectByIndex(A);

		}
		public static void Selectbyvaule(WebElement element, String i)
		{

			Select sc = new Select(element);
			sc.selectByValue(i);
					
		}
		
		public static void SelectbyvisibleText(WebElement web , String st) {

			Select sr = new Select(web);
			sr.selectByVisibleText(st);
			
		}
		
		public static void Actions(WebElement x) {
			Actions ac = new Actions(driver);
			ac.click(x).build().perform();
		}
		
		public static void Action_doubleclick(WebElement x) {
			Actions ac = new Actions(driver);
			ac.click(x).build().perform();
		}
		
		public static void Getoptions(WebElement gto) {

		}

		public static void Gettitle(WebElement w) {
			w.getText();
		}

		public static void Getcurrenturl() {
			driver.getCurrentUrl();
		}

		public static void getText(WebElement text) {
			String text2 = text.getText();
		System.out.println(text2);
		}

		public static void getTageName(WebElement text) {
			String text5 = text.getText();
		System.out.println(text5);
		}
		
		public static void Getattribute(WebElement attr, String Get) {
			attr.getAttribute(Get);
		}
		
		public static void clicktheelement(WebElement element ) {
			
			element.click();
		}

		public static void waitimplicit() {
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		}
		
		/*public static WebElement waitUntilVisible(WebElement webElement, int timeoutInSeconds) {
	        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeoutInSeconds));
	        return wait.until(ExpectedConditions.visibilityOfElementLocated((By) webElement));
	    }
		
		public static WebElement waitUntilClickable(By locator, int timeoutInSeconds) {
	        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeoutInSeconds));
	        return wait.until(ExpectedConditions.elementToBeClickable(locator));
	    }*/

		public static void Scrollupanddown(WebElement webElement)
		{
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].scrollIntoView(true);", webElement);
		}
		
		public static void Scrollup()
		{
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0, -window.innerHeight / 2);");

		}		
		public static void SendKeys(WebElement webElement, String S) {
				webElement.sendKeys(S);
		}


		public static void Getfirstselectedoptions(WebElement gt, String s) {
			Select sele = new Select(gt);
			WebElement firstSelectedOption = sele.getFirstSelectedOption();
			System.out.println(firstSelectedOption);
		}

		public static void Getallselectedoptions(WebElement L, String K) {
			Select sele = new Select(L);
			List<WebElement> allSelectedOptions = sele.getAllSelectedOptions();
			System.out.println(allSelectedOptions);
		}
		
		
		public static void enterOtp(String otp) {
		    if (otp.length() != 6) {
		        throw new IllegalArgumentException("OTP must be 6 digits!");
		    }

		    // Locate all 6 input boxes
		    List<WebElement> otpBoxes = new WebDriverWait(driver, 10)
		            .until(ExpectedConditions.visibilityOfAllElementsLocatedBy(
		                    By.cssSelector("div.flex.justify-between.space-x-2 input")
		            ));

		    for (int i = 0; i < otp.length(); i++) {
		        WebElement box = otpBoxes.get(i);
		        box.clear();
		        box.sendKeys(String.valueOf(otp.charAt(i)));
		    }

		    System.out.println("OTP entered successfully: " + otp);
		}


		private FluentWait<WebDriver> wait;
		
		
		public void safeClick(WebElement webElement) {
		    WebDriverWait wait = new WebDriverWait(driver, 10);
		    WebElement element = wait.until(ExpectedConditions.elementToBeClickable(webElement));
		    try {
		        element.click();
		    } catch (Exception e) {
		        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
		    }
		}
		
		public void clickCheckBox(WebElement webElement) {
		    WebDriverWait wait = new WebDriverWait(driver, 10);
		    WebElement checkbox = wait.until(ExpectedConditions.elementToBeClickable(webElement));

		    // Check if not already selected
		    if (!checkbox.isSelected()) {
		        checkbox.click();
		    }
		}
		
		
		public static void Actions_Moveto_Ele(WebElement webElement) {
			
			WebElement profileName = driver.findElement(By.xpath("//span[normalize-space()='Technologies']"));

			Actions actions = new Actions(driver);
			actions.moveToElement(profileName).click().perform();

			
		}
		
		public void modifyField(By locator, String newValue) {
	        WebElement field = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
	        field.clear();
	        field.sendKeys(newValue);
	    }
		
		
		
		
		


}
